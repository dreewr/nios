
niosP1.elf:     file format elf32-littlenios2
niosP1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000bec memsz 0x00000bec flags r-x
    LOAD off    0x00001c0c vaddr 0x00002c0c paddr 0x00002cfc align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001dec vaddr 0x00002dec paddr 0x00002dec align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000bd4  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  00002bf4  00002bf4  00001bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f0  00002c0c  00002cfc  00001c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  00002dec  00002dec  00001dec  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002c8  00000000  00000000  00001d28  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000003a2  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004706  00000000  00000000  00002392  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001252  00000000  00000000  00006a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003523  00000000  00000000  00007cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000468  00000000  00000000  0000b210  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000099f  00000000  00000000  0000b678  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000947  00000000  00000000  0000c017  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0000c960  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  0000c970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0000db12  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0000db15  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0000db21  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0000db22  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000006  00000000  00000000  0000db23  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000006  00000000  00000000  0000db29  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000006  00000000  00000000  0000db2f  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000a  00000000  00000000  0000db35  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000004d  00000000  00000000  0000db3f  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00020fed  00000000  00000000  0000db8c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
00002bf4 l    d  .rodata	00000000 .rodata
00002c0c l    d  .rwdata	00000000 .rwdata
00002dec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00002c0c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00002308 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00002474 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00002614 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
000026b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000029d0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00002b90 l     F .text	00000040 alt_sim_halt
00002374 g     F .text	00000050 alt_main
00002090 g     F .text	00000090 _puts_r
00002cfc g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002dec g     O .bss	00000004 errno
00002df4 g     O .bss	00000004 alt_argv
0000acec g       *ABS*	00000000 _gp
00002bf4 g       *ABS*	00000000 __DTOR_END__
00002120 g     F .text	00000014 puts
00000000  w      *UND*	00000000 malloc
00002cf0 g     O .rwdata	00000004 _global_impure_ptr
00002e88 g       *ABS*	00000000 __bss_end
00002710 g     F .text	0000001c alt_dcache_flush_all
00002cfc g       *ABS*	00000000 __ram_rwdata_end
000023c4 g     F .text	000000b0 write
00002c0c g       *ABS*	00000000 __ram_rodata_end
00002e88 g       *ABS*	00000000 end
00002524 g     F .text	000000f0 altera_avalon_uart_write
00002bf0 g       *ABS*	00000000 __CTOR_LIST__
00004000 g       *ABS*	00000000 __alt_stack_pointer
000029d4 g     F .text	000001bc __call_exitprocs
00002020 g     F .text	0000003c _start
00002508 g     F .text	0000001c alt_sys_init
00002864 g     F .text	0000016c __register_exitproc
00002c0c g       *ABS*	00000000 __ram_rwdata_start
00002bf4 g       *ABS*	00000000 __ram_rodata_start
00002e88 g       *ABS*	00000000 __alt_stack_base
00002154 g     F .text	000000bc __sfvwrite_small_dev
00002dec g       *ABS*	00000000 __bss_start
0000205c g     F .text	00000034 main
00002df8 g     O .bss	00000004 alt_envp
00002cf4 g     O .rwdata	00000004 uart_0
00002dfc g     O .bss	0000008c _atexit0
00002cf8 g     O .rwdata	00000004 alt_errno
00002bf4 g       *ABS*	00000000 __CTOR_END__
00002bf4 g       *ABS*	00000000 __flash_rodata_start
00002bf4 g       *ABS*	00000000 __DTOR_LIST__
000024d4 g     F .text	00000034 alt_irq_init
00002830 g     F .text	00000014 atexit
00002210 g     F .text	00000078 _write_r
00002cec g     O .rwdata	00000004 _impure_ptr
00002df0 g     O .bss	00000004 alt_argc
00002790 g     F .text	00000064 _do_dtors
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002cfc g       *ABS*	00000000 _edata
00002e88 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
00002000 g       *ABS*	00000000 __alt_mem_memory
00002810 g     F .text	00000020 altera_nios2_qsys_irq_init
00002844 g     F .text	00000020 exit
00004000 g       *ABS*	00000000 __alt_data_end
00002bd0 g     F .text	00000020 _exit
00002134 g     F .text	00000020 strlen
000027f4 g     F .text	0000001c alt_icache_flush_all
0000272c g     F .text	00000064 _do_ctors
00002674 g     F .text	0000003c close
00002288 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6ab3b14 	ori	gp,gp,44268
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	108b7b14 	ori	r2,r2,11756

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18cba214 	ori	r3,r3,11912

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	00022880 	call	2288 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00023740 	call	2374 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <alt_after_alt_main>

0000205c <main>:
 */

#include <stdio.h>

int main()
{
    205c:	defffe04 	addi	sp,sp,-8
    2060:	dfc00115 	stw	ra,4(sp)
    2064:	df000015 	stw	fp,0(sp)
    2068:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
    206c:	01000034 	movhi	r4,0
    2070:	210afd04 	addi	r4,r4,11252
    2074:	00021200 	call	2120 <puts>

  return 0;
    2078:	0005883a 	mov	r2,zero
}
    207c:	e037883a 	mov	sp,fp
    2080:	dfc00117 	ldw	ra,4(sp)
    2084:	df000017 	ldw	fp,0(sp)
    2088:	dec00204 	addi	sp,sp,8
    208c:	f800283a 	ret

00002090 <_puts_r>:
    2090:	defffd04 	addi	sp,sp,-12
    2094:	dc000015 	stw	r16,0(sp)
    2098:	2021883a 	mov	r16,r4
    209c:	2809883a 	mov	r4,r5
    20a0:	dfc00215 	stw	ra,8(sp)
    20a4:	dc400115 	stw	r17,4(sp)
    20a8:	2823883a 	mov	r17,r5
    20ac:	00021340 	call	2134 <strlen>
    20b0:	80c00217 	ldw	r3,8(r16)
    20b4:	02000034 	movhi	r8,0
    20b8:	42085504 	addi	r8,r8,8532
    20bc:	880d883a 	mov	r6,r17
    20c0:	100f883a 	mov	r7,r2
    20c4:	8009883a 	mov	r4,r16
    20c8:	180b883a 	mov	r5,r3
    20cc:	1a000115 	stw	r8,4(r3)
    20d0:	403ee83a 	callr	r8
    20d4:	047fffc4 	movi	r17,-1
    20d8:	8009883a 	mov	r4,r16
    20dc:	01800034 	movhi	r6,0
    20e0:	318b0204 	addi	r6,r6,11272
    20e4:	01c00044 	movi	r7,1
    20e8:	1440071e 	bne	r2,r17,2108 <_puts_r+0x78>
    20ec:	00ffffc4 	movi	r3,-1
    20f0:	1805883a 	mov	r2,r3
    20f4:	dfc00217 	ldw	ra,8(sp)
    20f8:	dc400117 	ldw	r17,4(sp)
    20fc:	dc000017 	ldw	r16,0(sp)
    2100:	dec00304 	addi	sp,sp,12
    2104:	f800283a 	ret
    2108:	81400217 	ldw	r5,8(r16)
    210c:	28c00117 	ldw	r3,4(r5)
    2110:	183ee83a 	callr	r3
    2114:	0007883a 	mov	r3,zero
    2118:	147ff51e 	bne	r2,r17,20f0 <_puts_r+0x60>
    211c:	003ff306 	br	20ec <_puts_r+0x5c>

00002120 <puts>:
    2120:	00800034 	movhi	r2,0
    2124:	108b3b04 	addi	r2,r2,11500
    2128:	200b883a 	mov	r5,r4
    212c:	11000017 	ldw	r4,0(r2)
    2130:	00020901 	jmpi	2090 <_puts_r>

00002134 <strlen>:
    2134:	20800007 	ldb	r2,0(r4)
    2138:	10000526 	beq	r2,zero,2150 <strlen+0x1c>
    213c:	2007883a 	mov	r3,r4
    2140:	18c00044 	addi	r3,r3,1
    2144:	18800007 	ldb	r2,0(r3)
    2148:	103ffd1e 	bne	r2,zero,2140 <strlen+0xc>
    214c:	1905c83a 	sub	r2,r3,r4
    2150:	f800283a 	ret

00002154 <__sfvwrite_small_dev>:
    2154:	2880000b 	ldhu	r2,0(r5)
    2158:	defffa04 	addi	sp,sp,-24
    215c:	dcc00315 	stw	r19,12(sp)
    2160:	1080020c 	andi	r2,r2,8
    2164:	dc800215 	stw	r18,8(sp)
    2168:	dc400115 	stw	r17,4(sp)
    216c:	dfc00515 	stw	ra,20(sp)
    2170:	dd000415 	stw	r20,16(sp)
    2174:	dc000015 	stw	r16,0(sp)
    2178:	2825883a 	mov	r18,r5
    217c:	2027883a 	mov	r19,r4
    2180:	3023883a 	mov	r17,r6
    2184:	10002026 	beq	r2,zero,2208 <__sfvwrite_small_dev+0xb4>
    2188:	2940008f 	ldh	r5,2(r5)
    218c:	28000f16 	blt	r5,zero,21cc <__sfvwrite_small_dev+0x78>
    2190:	01c01b0e 	bge	zero,r7,2200 <__sfvwrite_small_dev+0xac>
    2194:	3821883a 	mov	r16,r7
    2198:	05010004 	movi	r20,1024
    219c:	00000206 	br	21a8 <__sfvwrite_small_dev+0x54>
    21a0:	0400170e 	bge	zero,r16,2200 <__sfvwrite_small_dev+0xac>
    21a4:	9140008f 	ldh	r5,2(r18)
    21a8:	880d883a 	mov	r6,r17
    21ac:	9809883a 	mov	r4,r19
    21b0:	800f883a 	mov	r7,r16
    21b4:	a400010e 	bge	r20,r16,21bc <__sfvwrite_small_dev+0x68>
    21b8:	01c10004 	movi	r7,1024
    21bc:	00022100 	call	2210 <_write_r>
    21c0:	88a3883a 	add	r17,r17,r2
    21c4:	80a1c83a 	sub	r16,r16,r2
    21c8:	00bff516 	blt	zero,r2,21a0 <__sfvwrite_small_dev+0x4c>
    21cc:	9080000b 	ldhu	r2,0(r18)
    21d0:	00ffffc4 	movi	r3,-1
    21d4:	10801014 	ori	r2,r2,64
    21d8:	9080000d 	sth	r2,0(r18)
    21dc:	1805883a 	mov	r2,r3
    21e0:	dfc00517 	ldw	ra,20(sp)
    21e4:	dd000417 	ldw	r20,16(sp)
    21e8:	dcc00317 	ldw	r19,12(sp)
    21ec:	dc800217 	ldw	r18,8(sp)
    21f0:	dc400117 	ldw	r17,4(sp)
    21f4:	dc000017 	ldw	r16,0(sp)
    21f8:	dec00604 	addi	sp,sp,24
    21fc:	f800283a 	ret
    2200:	0007883a 	mov	r3,zero
    2204:	003ff506 	br	21dc <__sfvwrite_small_dev+0x88>
    2208:	00ffffc4 	movi	r3,-1
    220c:	003ff306 	br	21dc <__sfvwrite_small_dev+0x88>

00002210 <_write_r>:
    2210:	defffd04 	addi	sp,sp,-12
    2214:	dc000015 	stw	r16,0(sp)
    2218:	04000034 	movhi	r16,0
    221c:	840b7b04 	addi	r16,r16,11756
    2220:	dc400115 	stw	r17,4(sp)
    2224:	80000015 	stw	zero,0(r16)
    2228:	2023883a 	mov	r17,r4
    222c:	2809883a 	mov	r4,r5
    2230:	300b883a 	mov	r5,r6
    2234:	380d883a 	mov	r6,r7
    2238:	dfc00215 	stw	ra,8(sp)
    223c:	00023c40 	call	23c4 <write>
    2240:	1007883a 	mov	r3,r2
    2244:	00bfffc4 	movi	r2,-1
    2248:	18800626 	beq	r3,r2,2264 <_write_r+0x54>
    224c:	1805883a 	mov	r2,r3
    2250:	dfc00217 	ldw	ra,8(sp)
    2254:	dc400117 	ldw	r17,4(sp)
    2258:	dc000017 	ldw	r16,0(sp)
    225c:	dec00304 	addi	sp,sp,12
    2260:	f800283a 	ret
    2264:	80800017 	ldw	r2,0(r16)
    2268:	103ff826 	beq	r2,zero,224c <_write_r+0x3c>
    226c:	88800015 	stw	r2,0(r17)
    2270:	1805883a 	mov	r2,r3
    2274:	dfc00217 	ldw	ra,8(sp)
    2278:	dc400117 	ldw	r17,4(sp)
    227c:	dc000017 	ldw	r16,0(sp)
    2280:	dec00304 	addi	sp,sp,12
    2284:	f800283a 	ret

00002288 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2288:	defffe04 	addi	sp,sp,-8
    228c:	dfc00115 	stw	ra,4(sp)
    2290:	df000015 	stw	fp,0(sp)
    2294:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2298:	01000034 	movhi	r4,0
    229c:	210b3f04 	addi	r4,r4,11516
    22a0:	01400034 	movhi	r5,0
    22a4:	294b0304 	addi	r5,r5,11276
    22a8:	01800034 	movhi	r6,0
    22ac:	318b3f04 	addi	r6,r6,11516
    22b0:	00023080 	call	2308 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    22b4:	01000034 	movhi	r4,0
    22b8:	21080804 	addi	r4,r4,8224
    22bc:	01400034 	movhi	r5,0
    22c0:	29480804 	addi	r5,r5,8224
    22c4:	01800034 	movhi	r6,0
    22c8:	31880804 	addi	r6,r6,8224
    22cc:	00023080 	call	2308 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    22d0:	01000034 	movhi	r4,0
    22d4:	210afd04 	addi	r4,r4,11252
    22d8:	01400034 	movhi	r5,0
    22dc:	294afd04 	addi	r5,r5,11252
    22e0:	01800034 	movhi	r6,0
    22e4:	318b0304 	addi	r6,r6,11276
    22e8:	00023080 	call	2308 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    22ec:	00027100 	call	2710 <alt_dcache_flush_all>
  alt_icache_flush_all();
    22f0:	00027f40 	call	27f4 <alt_icache_flush_all>
}
    22f4:	e037883a 	mov	sp,fp
    22f8:	dfc00117 	ldw	ra,4(sp)
    22fc:	df000017 	ldw	fp,0(sp)
    2300:	dec00204 	addi	sp,sp,8
    2304:	f800283a 	ret

00002308 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    2308:	defffc04 	addi	sp,sp,-16
    230c:	df000315 	stw	fp,12(sp)
    2310:	df000304 	addi	fp,sp,12
    2314:	e13ffd15 	stw	r4,-12(fp)
    2318:	e17ffe15 	stw	r5,-8(fp)
    231c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    2320:	e0fffe17 	ldw	r3,-8(fp)
    2324:	e0bffd17 	ldw	r2,-12(fp)
    2328:	18800e26 	beq	r3,r2,2364 <alt_load_section+0x5c>
  {
    while( to != end )
    232c:	00000a06 	br	2358 <alt_load_section+0x50>
    {
      *to++ = *from++;
    2330:	e0bffd17 	ldw	r2,-12(fp)
    2334:	10c00017 	ldw	r3,0(r2)
    2338:	e0bffe17 	ldw	r2,-8(fp)
    233c:	10c00015 	stw	r3,0(r2)
    2340:	e0bffe17 	ldw	r2,-8(fp)
    2344:	10800104 	addi	r2,r2,4
    2348:	e0bffe15 	stw	r2,-8(fp)
    234c:	e0bffd17 	ldw	r2,-12(fp)
    2350:	10800104 	addi	r2,r2,4
    2354:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    2358:	e0fffe17 	ldw	r3,-8(fp)
    235c:	e0bfff17 	ldw	r2,-4(fp)
    2360:	18bff31e 	bne	r3,r2,2330 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    2364:	e037883a 	mov	sp,fp
    2368:	df000017 	ldw	fp,0(sp)
    236c:	dec00104 	addi	sp,sp,4
    2370:	f800283a 	ret

00002374 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2374:	defffd04 	addi	sp,sp,-12
    2378:	dfc00215 	stw	ra,8(sp)
    237c:	df000115 	stw	fp,4(sp)
    2380:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2384:	0009883a 	mov	r4,zero
    2388:	00024d40 	call	24d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    238c:	00025080 	call	2508 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    2390:	000272c0 	call	272c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    2394:	01000034 	movhi	r4,0
    2398:	2109e404 	addi	r4,r4,10128
    239c:	00028300 	call	2830 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    23a0:	d1204117 	ldw	r4,-32508(gp)
    23a4:	d1604217 	ldw	r5,-32504(gp)
    23a8:	d1a04317 	ldw	r6,-32500(gp)
    23ac:	000205c0 	call	205c <main>
    23b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    23b4:	01000044 	movi	r4,1
    23b8:	00026740 	call	2674 <close>
  exit (result);
    23bc:	e13fff17 	ldw	r4,-4(fp)
    23c0:	00028440 	call	2844 <exit>

000023c4 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    23c4:	defff904 	addi	sp,sp,-28
    23c8:	dfc00615 	stw	ra,24(sp)
    23cc:	df000515 	stw	fp,20(sp)
    23d0:	df000504 	addi	fp,sp,20
    23d4:	e13ffb15 	stw	r4,-20(fp)
    23d8:	e17ffc15 	stw	r5,-16(fp)
    23dc:	e1bffd15 	stw	r6,-12(fp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    23e0:	e0bffb17 	ldw	r2,-20(fp)
    23e4:	e0bfff15 	stw	r2,-4(fp)
    23e8:	e0ffff17 	ldw	r3,-4(fp)
    23ec:	18800060 	cmpeqi	r2,r3,1
    23f0:	1000041e 	bne	r2,zero,2404 <write+0x40>
    23f4:	e0ffff17 	ldw	r3,-4(fp)
    23f8:	188000a0 	cmpeqi	r2,r3,2
    23fc:	1000091e 	bne	r2,zero,2424 <write+0x60>
    2400:	00001006 	br	2444 <write+0x80>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    2404:	e17ffc17 	ldw	r5,-16(fp)
    2408:	e1bffd17 	ldw	r6,-12(fp)
    240c:	01000034 	movhi	r4,0
    2410:	210b3d04 	addi	r4,r4,11508
    2414:	000f883a 	mov	r7,zero
    2418:	00025240 	call	2524 <altera_avalon_uart_write>
    241c:	e0bffe15 	stw	r2,-8(fp)
    2420:	00000e06 	br	245c <write+0x98>
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    2424:	e17ffc17 	ldw	r5,-16(fp)
    2428:	e1bffd17 	ldw	r6,-12(fp)
    242c:	01000034 	movhi	r4,0
    2430:	210b3d04 	addi	r4,r4,11508
    2434:	000f883a 	mov	r7,zero
    2438:	00025240 	call	2524 <altera_avalon_uart_write>
    243c:	e0bffe15 	stw	r2,-8(fp)
    2440:	00000606 	br	245c <write+0x98>
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    2444:	00024740 	call	2474 <alt_get_errno>
    2448:	1007883a 	mov	r3,r2
    244c:	00801444 	movi	r2,81
    2450:	18800015 	stw	r2,0(r3)
        return -1;
    2454:	00bfffc4 	movi	r2,-1
    2458:	e0bffe15 	stw	r2,-8(fp)
    245c:	e0bffe17 	ldw	r2,-8(fp)
    }
}
    2460:	e037883a 	mov	sp,fp
    2464:	dfc00117 	ldw	ra,4(sp)
    2468:	df000017 	ldw	fp,0(sp)
    246c:	dec00204 	addi	sp,sp,8
    2470:	f800283a 	ret

00002474 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2474:	defffd04 	addi	sp,sp,-12
    2478:	dfc00215 	stw	ra,8(sp)
    247c:	df000115 	stw	fp,4(sp)
    2480:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2484:	00800034 	movhi	r2,0
    2488:	108b3e04 	addi	r2,r2,11512
    248c:	10800017 	ldw	r2,0(r2)
    2490:	1005003a 	cmpeq	r2,r2,zero
    2494:	1000061e 	bne	r2,zero,24b0 <alt_get_errno+0x3c>
    2498:	00800034 	movhi	r2,0
    249c:	108b3e04 	addi	r2,r2,11512
    24a0:	10800017 	ldw	r2,0(r2)
    24a4:	103ee83a 	callr	r2
    24a8:	e0bfff15 	stw	r2,-4(fp)
    24ac:	00000306 	br	24bc <alt_get_errno+0x48>
    24b0:	00800034 	movhi	r2,0
    24b4:	108b7b04 	addi	r2,r2,11756
    24b8:	e0bfff15 	stw	r2,-4(fp)
    24bc:	e0bfff17 	ldw	r2,-4(fp)
}
    24c0:	e037883a 	mov	sp,fp
    24c4:	dfc00117 	ldw	ra,4(sp)
    24c8:	df000017 	ldw	fp,0(sp)
    24cc:	dec00204 	addi	sp,sp,8
    24d0:	f800283a 	ret

000024d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    24d4:	defffd04 	addi	sp,sp,-12
    24d8:	dfc00215 	stw	ra,8(sp)
    24dc:	df000115 	stw	fp,4(sp)
    24e0:	df000104 	addi	fp,sp,4
    24e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    24e8:	00028100 	call	2810 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    24ec:	00800044 	movi	r2,1
    24f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    24f4:	e037883a 	mov	sp,fp
    24f8:	dfc00117 	ldw	ra,4(sp)
    24fc:	df000017 	ldw	fp,0(sp)
    2500:	dec00204 	addi	sp,sp,8
    2504:	f800283a 	ret

00002508 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2508:	deffff04 	addi	sp,sp,-4
    250c:	df000015 	stw	fp,0(sp)
    2510:	d839883a 	mov	fp,sp
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
}
    2514:	e037883a 	mov	sp,fp
    2518:	df000017 	ldw	fp,0(sp)
    251c:	dec00104 	addi	sp,sp,4
    2520:	f800283a 	ret

00002524 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    2524:	defff704 	addi	sp,sp,-36
    2528:	dfc00815 	stw	ra,32(sp)
    252c:	df000715 	stw	fp,28(sp)
    2530:	df000704 	addi	fp,sp,28
    2534:	e13ffc15 	stw	r4,-16(fp)
    2538:	e17ffd15 	stw	r5,-12(fp)
    253c:	e1bffe15 	stw	r6,-8(fp)
    2540:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    2544:	e0bfff17 	ldw	r2,-4(fp)
    2548:	1090000c 	andi	r2,r2,16384
    254c:	1005003a 	cmpeq	r2,r2,zero
    2550:	e0bffb15 	stw	r2,-20(fp)
  count = len;
    2554:	e0bffe17 	ldw	r2,-8(fp)
    2558:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    255c:	e0bffc17 	ldw	r2,-16(fp)
    2560:	10800017 	ldw	r2,0(r2)
    2564:	10800204 	addi	r2,r2,8
    2568:	10800037 	ldwio	r2,0(r2)
    256c:	e0bffa15 	stw	r2,-24(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    2570:	e0bffa17 	ldw	r2,-24(fp)
    2574:	1080100c 	andi	r2,r2,64
    2578:	1005003a 	cmpeq	r2,r2,zero
    257c:	1000101e 	bne	r2,zero,25c0 <altera_avalon_uart_write+0x9c>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    2580:	e0bffc17 	ldw	r2,-16(fp)
    2584:	10800017 	ldw	r2,0(r2)
    2588:	11000104 	addi	r4,r2,4
    258c:	e0bffd17 	ldw	r2,-12(fp)
    2590:	10800003 	ldbu	r2,0(r2)
    2594:	10c03fcc 	andi	r3,r2,255
    2598:	18c0201c 	xori	r3,r3,128
    259c:	18ffe004 	addi	r3,r3,-128
    25a0:	e0bffd17 	ldw	r2,-12(fp)
    25a4:	10800044 	addi	r2,r2,1
    25a8:	e0bffd15 	stw	r2,-12(fp)
    25ac:	2005883a 	mov	r2,r4
    25b0:	10c00035 	stwio	r3,0(r2)
      count--;
    25b4:	e0bff917 	ldw	r2,-28(fp)
    25b8:	10bfffc4 	addi	r2,r2,-1
    25bc:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    25c0:	e0bffb17 	ldw	r2,-20(fp)
    25c4:	1005003a 	cmpeq	r2,r2,zero
    25c8:	1000031e 	bne	r2,zero,25d8 <altera_avalon_uart_write+0xb4>
    25cc:	e0bff917 	ldw	r2,-28(fp)
    25d0:	1004c03a 	cmpne	r2,r2,zero
    25d4:	103fe11e 	bne	r2,zero,255c <altera_avalon_uart_write+0x38>

  if (count)
    25d8:	e0bff917 	ldw	r2,-28(fp)
    25dc:	1005003a 	cmpeq	r2,r2,zero
    25e0:	1000041e 	bne	r2,zero,25f4 <altera_avalon_uart_write+0xd0>
  {
    ALT_ERRNO = EWOULDBLOCK;
    25e4:	00026140 	call	2614 <alt_get_errno>
    25e8:	1007883a 	mov	r3,r2
    25ec:	008002c4 	movi	r2,11
    25f0:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
    25f4:	e0fffe17 	ldw	r3,-8(fp)
    25f8:	e0bff917 	ldw	r2,-28(fp)
    25fc:	1885c83a 	sub	r2,r3,r2
}
    2600:	e037883a 	mov	sp,fp
    2604:	dfc00117 	ldw	ra,4(sp)
    2608:	df000017 	ldw	fp,0(sp)
    260c:	dec00204 	addi	sp,sp,8
    2610:	f800283a 	ret

00002614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2614:	defffd04 	addi	sp,sp,-12
    2618:	dfc00215 	stw	ra,8(sp)
    261c:	df000115 	stw	fp,4(sp)
    2620:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2624:	00800034 	movhi	r2,0
    2628:	108b3e04 	addi	r2,r2,11512
    262c:	10800017 	ldw	r2,0(r2)
    2630:	1005003a 	cmpeq	r2,r2,zero
    2634:	1000061e 	bne	r2,zero,2650 <alt_get_errno+0x3c>
    2638:	00800034 	movhi	r2,0
    263c:	108b3e04 	addi	r2,r2,11512
    2640:	10800017 	ldw	r2,0(r2)
    2644:	103ee83a 	callr	r2
    2648:	e0bfff15 	stw	r2,-4(fp)
    264c:	00000306 	br	265c <alt_get_errno+0x48>
    2650:	00800034 	movhi	r2,0
    2654:	108b7b04 	addi	r2,r2,11756
    2658:	e0bfff15 	stw	r2,-4(fp)
    265c:	e0bfff17 	ldw	r2,-4(fp)
}
    2660:	e037883a 	mov	sp,fp
    2664:	dfc00117 	ldw	ra,4(sp)
    2668:	df000017 	ldw	fp,0(sp)
    266c:	dec00204 	addi	sp,sp,8
    2670:	f800283a 	ret

00002674 <close>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
    2674:	defffd04 	addi	sp,sp,-12
    2678:	dfc00215 	stw	ra,8(sp)
    267c:	df000115 	stw	fp,4(sp)
    2680:	df000104 	addi	fp,sp,4
    2684:	e13fff15 	stw	r4,-4(fp)
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
    2688:	00026b00 	call	26b0 <alt_get_errno>
    268c:	1007883a 	mov	r3,r2
    2690:	00801604 	movi	r2,88
    2694:	18800015 	stw	r2,0(r3)
  return -1;
    2698:	00bfffc4 	movi	r2,-1
}
    269c:	e037883a 	mov	sp,fp
    26a0:	dfc00117 	ldw	ra,4(sp)
    26a4:	df000017 	ldw	fp,0(sp)
    26a8:	dec00204 	addi	sp,sp,8
    26ac:	f800283a 	ret

000026b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    26b0:	defffd04 	addi	sp,sp,-12
    26b4:	dfc00215 	stw	ra,8(sp)
    26b8:	df000115 	stw	fp,4(sp)
    26bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    26c0:	00800034 	movhi	r2,0
    26c4:	108b3e04 	addi	r2,r2,11512
    26c8:	10800017 	ldw	r2,0(r2)
    26cc:	1005003a 	cmpeq	r2,r2,zero
    26d0:	1000061e 	bne	r2,zero,26ec <alt_get_errno+0x3c>
    26d4:	00800034 	movhi	r2,0
    26d8:	108b3e04 	addi	r2,r2,11512
    26dc:	10800017 	ldw	r2,0(r2)
    26e0:	103ee83a 	callr	r2
    26e4:	e0bfff15 	stw	r2,-4(fp)
    26e8:	00000306 	br	26f8 <alt_get_errno+0x48>
    26ec:	00800034 	movhi	r2,0
    26f0:	108b7b04 	addi	r2,r2,11756
    26f4:	e0bfff15 	stw	r2,-4(fp)
    26f8:	e0bfff17 	ldw	r2,-4(fp)
}
    26fc:	e037883a 	mov	sp,fp
    2700:	dfc00117 	ldw	ra,4(sp)
    2704:	df000017 	ldw	fp,0(sp)
    2708:	dec00204 	addi	sp,sp,8
    270c:	f800283a 	ret

00002710 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2710:	deffff04 	addi	sp,sp,-4
    2714:	df000015 	stw	fp,0(sp)
    2718:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    271c:	e037883a 	mov	sp,fp
    2720:	df000017 	ldw	fp,0(sp)
    2724:	dec00104 	addi	sp,sp,4
    2728:	f800283a 	ret

0000272c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    272c:	defffd04 	addi	sp,sp,-12
    2730:	dfc00215 	stw	ra,8(sp)
    2734:	df000115 	stw	fp,4(sp)
    2738:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    273c:	00bfff04 	movi	r2,-4
    2740:	00c00034 	movhi	r3,0
    2744:	18cafd04 	addi	r3,r3,11252
    2748:	1885883a 	add	r2,r3,r2
    274c:	e0bfff15 	stw	r2,-4(fp)
    2750:	00000606 	br	276c <_do_ctors+0x40>
        (*ctor) (); 
    2754:	e0bfff17 	ldw	r2,-4(fp)
    2758:	10800017 	ldw	r2,0(r2)
    275c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2760:	e0bfff17 	ldw	r2,-4(fp)
    2764:	10bfff04 	addi	r2,r2,-4
    2768:	e0bfff15 	stw	r2,-4(fp)
    276c:	e0ffff17 	ldw	r3,-4(fp)
    2770:	00800034 	movhi	r2,0
    2774:	108afc04 	addi	r2,r2,11248
    2778:	18bff62e 	bgeu	r3,r2,2754 <_do_ctors+0x28>
        (*ctor) (); 
}
    277c:	e037883a 	mov	sp,fp
    2780:	dfc00117 	ldw	ra,4(sp)
    2784:	df000017 	ldw	fp,0(sp)
    2788:	dec00204 	addi	sp,sp,8
    278c:	f800283a 	ret

00002790 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    2790:	defffd04 	addi	sp,sp,-12
    2794:	dfc00215 	stw	ra,8(sp)
    2798:	df000115 	stw	fp,4(sp)
    279c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    27a0:	00bfff04 	movi	r2,-4
    27a4:	00c00034 	movhi	r3,0
    27a8:	18cafd04 	addi	r3,r3,11252
    27ac:	1885883a 	add	r2,r3,r2
    27b0:	e0bfff15 	stw	r2,-4(fp)
    27b4:	00000606 	br	27d0 <_do_dtors+0x40>
        (*dtor) (); 
    27b8:	e0bfff17 	ldw	r2,-4(fp)
    27bc:	10800017 	ldw	r2,0(r2)
    27c0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    27c4:	e0bfff17 	ldw	r2,-4(fp)
    27c8:	10bfff04 	addi	r2,r2,-4
    27cc:	e0bfff15 	stw	r2,-4(fp)
    27d0:	e0ffff17 	ldw	r3,-4(fp)
    27d4:	00800034 	movhi	r2,0
    27d8:	108afd04 	addi	r2,r2,11252
    27dc:	18bff62e 	bgeu	r3,r2,27b8 <_do_dtors+0x28>
        (*dtor) (); 
}
    27e0:	e037883a 	mov	sp,fp
    27e4:	dfc00117 	ldw	ra,4(sp)
    27e8:	df000017 	ldw	fp,0(sp)
    27ec:	dec00204 	addi	sp,sp,8
    27f0:	f800283a 	ret

000027f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    27f4:	deffff04 	addi	sp,sp,-4
    27f8:	df000015 	stw	fp,0(sp)
    27fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2800:	e037883a 	mov	sp,fp
    2804:	df000017 	ldw	fp,0(sp)
    2808:	dec00104 	addi	sp,sp,4
    280c:	f800283a 	ret

00002810 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    2810:	deffff04 	addi	sp,sp,-4
    2814:	df000015 	stw	fp,0(sp)
    2818:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    281c:	000170fa 	wrctl	ienable,zero
}
    2820:	e037883a 	mov	sp,fp
    2824:	df000017 	ldw	fp,0(sp)
    2828:	dec00104 	addi	sp,sp,4
    282c:	f800283a 	ret

00002830 <atexit>:
    2830:	200b883a 	mov	r5,r4
    2834:	000d883a 	mov	r6,zero
    2838:	0009883a 	mov	r4,zero
    283c:	000f883a 	mov	r7,zero
    2840:	00028641 	jmpi	2864 <__register_exitproc>

00002844 <exit>:
    2844:	defffe04 	addi	sp,sp,-8
    2848:	dc400015 	stw	r17,0(sp)
    284c:	000b883a 	mov	r5,zero
    2850:	2023883a 	mov	r17,r4
    2854:	dfc00115 	stw	ra,4(sp)
    2858:	00029d40 	call	29d4 <__call_exitprocs>
    285c:	8809883a 	mov	r4,r17
    2860:	0002bd00 	call	2bd0 <_exit>

00002864 <__register_exitproc>:
    2864:	defff904 	addi	sp,sp,-28
    2868:	00800034 	movhi	r2,0
    286c:	108b3c04 	addi	r2,r2,11504
    2870:	dc400115 	stw	r17,4(sp)
    2874:	14400017 	ldw	r17,0(r2)
    2878:	dc000015 	stw	r16,0(sp)
    287c:	dd400515 	stw	r21,20(sp)
    2880:	8c000c17 	ldw	r16,48(r17)
    2884:	dd000415 	stw	r20,16(sp)
    2888:	dcc00315 	stw	r19,12(sp)
    288c:	dc800215 	stw	r18,8(sp)
    2890:	dfc00615 	stw	ra,24(sp)
    2894:	2025883a 	mov	r18,r4
    2898:	282b883a 	mov	r21,r5
    289c:	3029883a 	mov	r20,r6
    28a0:	3827883a 	mov	r19,r7
    28a4:	80002626 	beq	r16,zero,2940 <__register_exitproc+0xdc>
    28a8:	81400117 	ldw	r5,4(r16)
    28ac:	008007c4 	movi	r2,31
    28b0:	11403716 	blt	r2,r5,2990 <__register_exitproc+0x12c>
    28b4:	90002026 	beq	r18,zero,2938 <__register_exitproc+0xd4>
    28b8:	81802217 	ldw	r6,136(r16)
    28bc:	30002926 	beq	r6,zero,2964 <__register_exitproc+0x100>
    28c0:	81400117 	ldw	r5,4(r16)
    28c4:	00c00044 	movi	r3,1
    28c8:	31004017 	ldw	r4,256(r6)
    28cc:	1946983a 	sll	r3,r3,r5
    28d0:	2945883a 	add	r2,r5,r5
    28d4:	1085883a 	add	r2,r2,r2
    28d8:	1185883a 	add	r2,r2,r6
    28dc:	20c8b03a 	or	r4,r4,r3
    28e0:	14c02015 	stw	r19,128(r2)
    28e4:	15000015 	stw	r20,0(r2)
    28e8:	00800084 	movi	r2,2
    28ec:	31004015 	stw	r4,256(r6)
    28f0:	90801826 	beq	r18,r2,2954 <__register_exitproc+0xf0>
    28f4:	2945883a 	add	r2,r5,r5
    28f8:	1085883a 	add	r2,r2,r2
    28fc:	1405883a 	add	r2,r2,r16
    2900:	28c00044 	addi	r3,r5,1
    2904:	0009883a 	mov	r4,zero
    2908:	15400215 	stw	r21,8(r2)
    290c:	80c00115 	stw	r3,4(r16)
    2910:	2005883a 	mov	r2,r4
    2914:	dfc00617 	ldw	ra,24(sp)
    2918:	dd400517 	ldw	r21,20(sp)
    291c:	dd000417 	ldw	r20,16(sp)
    2920:	dcc00317 	ldw	r19,12(sp)
    2924:	dc800217 	ldw	r18,8(sp)
    2928:	dc400117 	ldw	r17,4(sp)
    292c:	dc000017 	ldw	r16,0(sp)
    2930:	dec00704 	addi	sp,sp,28
    2934:	f800283a 	ret
    2938:	81400117 	ldw	r5,4(r16)
    293c:	003fed06 	br	28f4 <__register_exitproc+0x90>
    2940:	00800034 	movhi	r2,0
    2944:	108b7f04 	addi	r2,r2,11772
    2948:	1021883a 	mov	r16,r2
    294c:	88800c15 	stw	r2,48(r17)
    2950:	003fd506 	br	28a8 <__register_exitproc+0x44>
    2954:	30804117 	ldw	r2,260(r6)
    2958:	10c4b03a 	or	r2,r2,r3
    295c:	30804115 	stw	r2,260(r6)
    2960:	003fe406 	br	28f4 <__register_exitproc+0x90>
    2964:	00800034 	movhi	r2,0
    2968:	10800004 	addi	r2,r2,0
    296c:	10000b26 	beq	r2,zero,299c <__register_exitproc+0x138>
    2970:	01004204 	movi	r4,264
    2974:	103ee83a 	callr	r2
    2978:	10000826 	beq	r2,zero,299c <__register_exitproc+0x138>
    297c:	100d883a 	mov	r6,r2
    2980:	10004015 	stw	zero,256(r2)
    2984:	10004115 	stw	zero,260(r2)
    2988:	80802215 	stw	r2,136(r16)
    298c:	003fcc06 	br	28c0 <__register_exitproc+0x5c>
    2990:	00800034 	movhi	r2,0
    2994:	10800004 	addi	r2,r2,0
    2998:	1000021e 	bne	r2,zero,29a4 <__register_exitproc+0x140>
    299c:	013fffc4 	movi	r4,-1
    29a0:	003fdb06 	br	2910 <__register_exitproc+0xac>
    29a4:	01002304 	movi	r4,140
    29a8:	103ee83a 	callr	r2
    29ac:	1007883a 	mov	r3,r2
    29b0:	103ffa26 	beq	r2,zero,299c <__register_exitproc+0x138>
    29b4:	88800c17 	ldw	r2,48(r17)
    29b8:	1821883a 	mov	r16,r3
    29bc:	18000115 	stw	zero,4(r3)
    29c0:	18800015 	stw	r2,0(r3)
    29c4:	88c00c15 	stw	r3,48(r17)
    29c8:	903fdb26 	beq	r18,zero,2938 <__register_exitproc+0xd4>
    29cc:	003fba06 	br	28b8 <__register_exitproc+0x54>

000029d0 <register_fini>:
    29d0:	f800283a 	ret

000029d4 <__call_exitprocs>:
    29d4:	defff304 	addi	sp,sp,-52
    29d8:	00800034 	movhi	r2,0
    29dc:	108b3c04 	addi	r2,r2,11504
    29e0:	df000b15 	stw	fp,44(sp)
    29e4:	17000017 	ldw	fp,0(r2)
    29e8:	00800034 	movhi	r2,0
    29ec:	10800004 	addi	r2,r2,0
    29f0:	1005003a 	cmpeq	r2,r2,zero
    29f4:	d8800215 	stw	r2,8(sp)
    29f8:	e0800c04 	addi	r2,fp,48
    29fc:	dd800915 	stw	r22,36(sp)
    2a00:	dd400815 	stw	r21,32(sp)
    2a04:	dfc00c15 	stw	ra,48(sp)
    2a08:	ddc00a15 	stw	r23,40(sp)
    2a0c:	dd000715 	stw	r20,28(sp)
    2a10:	dcc00615 	stw	r19,24(sp)
    2a14:	dc800515 	stw	r18,20(sp)
    2a18:	dc400415 	stw	r17,16(sp)
    2a1c:	dc000315 	stw	r16,12(sp)
    2a20:	282d883a 	mov	r22,r5
    2a24:	d9000115 	stw	r4,4(sp)
    2a28:	d8800015 	stw	r2,0(sp)
    2a2c:	282b003a 	cmpeq	r21,r5,zero
    2a30:	e4400c17 	ldw	r17,48(fp)
    2a34:	88001226 	beq	r17,zero,2a80 <__call_exitprocs+0xac>
    2a38:	ddc00017 	ldw	r23,0(sp)
    2a3c:	88800117 	ldw	r2,4(r17)
    2a40:	8c802217 	ldw	r18,136(r17)
    2a44:	143fffc4 	addi	r16,r2,-1
    2a48:	80000b16 	blt	r16,zero,2a78 <__call_exitprocs+0xa4>
    2a4c:	9027003a 	cmpeq	r19,r18,zero
    2a50:	a800171e 	bne	r21,zero,2ab0 <__call_exitprocs+0xdc>
    2a54:	9800051e 	bne	r19,zero,2a6c <__call_exitprocs+0x98>
    2a58:	8409883a 	add	r4,r16,r16
    2a5c:	2105883a 	add	r2,r4,r4
    2a60:	1485883a 	add	r2,r2,r18
    2a64:	10c02017 	ldw	r3,128(r2)
    2a68:	b0c01226 	beq	r22,r3,2ab4 <__call_exitprocs+0xe0>
    2a6c:	843fffc4 	addi	r16,r16,-1
    2a70:	00bfffc4 	movi	r2,-1
    2a74:	80bff61e 	bne	r16,r2,2a50 <__call_exitprocs+0x7c>
    2a78:	d8800217 	ldw	r2,8(sp)
    2a7c:	10003226 	beq	r2,zero,2b48 <__call_exitprocs+0x174>
    2a80:	dfc00c17 	ldw	ra,48(sp)
    2a84:	df000b17 	ldw	fp,44(sp)
    2a88:	ddc00a17 	ldw	r23,40(sp)
    2a8c:	dd800917 	ldw	r22,36(sp)
    2a90:	dd400817 	ldw	r21,32(sp)
    2a94:	dd000717 	ldw	r20,28(sp)
    2a98:	dcc00617 	ldw	r19,24(sp)
    2a9c:	dc800517 	ldw	r18,20(sp)
    2aa0:	dc400417 	ldw	r17,16(sp)
    2aa4:	dc000317 	ldw	r16,12(sp)
    2aa8:	dec00d04 	addi	sp,sp,52
    2aac:	f800283a 	ret
    2ab0:	8409883a 	add	r4,r16,r16
    2ab4:	88c00117 	ldw	r3,4(r17)
    2ab8:	2105883a 	add	r2,r4,r4
    2abc:	1445883a 	add	r2,r2,r17
    2ac0:	18ffffc4 	addi	r3,r3,-1
    2ac4:	11800217 	ldw	r6,8(r2)
    2ac8:	1c001826 	beq	r3,r16,2b2c <__call_exitprocs+0x158>
    2acc:	10000215 	stw	zero,8(r2)
    2ad0:	303fe626 	beq	r6,zero,2a6c <__call_exitprocs+0x98>
    2ad4:	8d000117 	ldw	r20,4(r17)
    2ad8:	9800121e 	bne	r19,zero,2b24 <__call_exitprocs+0x150>
    2adc:	00c00044 	movi	r3,1
    2ae0:	1c06983a 	sll	r3,r3,r16
    2ae4:	90804017 	ldw	r2,256(r18)
    2ae8:	1884703a 	and	r2,r3,r2
    2aec:	10000d26 	beq	r2,zero,2b24 <__call_exitprocs+0x150>
    2af0:	90804117 	ldw	r2,260(r18)
    2af4:	1884703a 	and	r2,r3,r2
    2af8:	10000e1e 	bne	r2,zero,2b34 <__call_exitprocs+0x160>
    2afc:	2105883a 	add	r2,r4,r4
    2b00:	1485883a 	add	r2,r2,r18
    2b04:	11400017 	ldw	r5,0(r2)
    2b08:	d9000117 	ldw	r4,4(sp)
    2b0c:	303ee83a 	callr	r6
    2b10:	88800117 	ldw	r2,4(r17)
    2b14:	a0bfc61e 	bne	r20,r2,2a30 <__call_exitprocs+0x5c>
    2b18:	b8800017 	ldw	r2,0(r23)
    2b1c:	147fd326 	beq	r2,r17,2a6c <__call_exitprocs+0x98>
    2b20:	003fc306 	br	2a30 <__call_exitprocs+0x5c>
    2b24:	303ee83a 	callr	r6
    2b28:	003ff906 	br	2b10 <__call_exitprocs+0x13c>
    2b2c:	8c000115 	stw	r16,4(r17)
    2b30:	003fe706 	br	2ad0 <__call_exitprocs+0xfc>
    2b34:	2105883a 	add	r2,r4,r4
    2b38:	1485883a 	add	r2,r2,r18
    2b3c:	11000017 	ldw	r4,0(r2)
    2b40:	303ee83a 	callr	r6
    2b44:	003ff206 	br	2b10 <__call_exitprocs+0x13c>
    2b48:	88800117 	ldw	r2,4(r17)
    2b4c:	10000b1e 	bne	r2,zero,2b7c <__call_exitprocs+0x1a8>
    2b50:	89000017 	ldw	r4,0(r17)
    2b54:	20000a26 	beq	r4,zero,2b80 <__call_exitprocs+0x1ac>
    2b58:	b9000015 	stw	r4,0(r23)
    2b5c:	90000226 	beq	r18,zero,2b68 <__call_exitprocs+0x194>
    2b60:	9009883a 	mov	r4,r18
    2b64:	00000000 	call	0 <__alt_mem_memory-0x2000>
    2b68:	8809883a 	mov	r4,r17
    2b6c:	00000000 	call	0 <__alt_mem_memory-0x2000>
    2b70:	bc400017 	ldw	r17,0(r23)
    2b74:	883fb11e 	bne	r17,zero,2a3c <__call_exitprocs+0x68>
    2b78:	003fc106 	br	2a80 <__call_exitprocs+0xac>
    2b7c:	89000017 	ldw	r4,0(r17)
    2b80:	882f883a 	mov	r23,r17
    2b84:	2023883a 	mov	r17,r4
    2b88:	883fac1e 	bne	r17,zero,2a3c <__call_exitprocs+0x68>
    2b8c:	003fbc06 	br	2a80 <__call_exitprocs+0xac>

00002b90 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    2b90:	defffd04 	addi	sp,sp,-12
    2b94:	df000215 	stw	fp,8(sp)
    2b98:	df000204 	addi	fp,sp,8
    2b9c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    2ba0:	e0bfff17 	ldw	r2,-4(fp)
    2ba4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    2ba8:	e0bffe17 	ldw	r2,-8(fp)
    2bac:	1005003a 	cmpeq	r2,r2,zero
    2bb0:	1000021e 	bne	r2,zero,2bbc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    2bb4:	002af070 	cmpltui	zero,zero,43969
    2bb8:	00000106 	br	2bc0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    2bbc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    2bc0:	e037883a 	mov	sp,fp
    2bc4:	df000017 	ldw	fp,0(sp)
    2bc8:	dec00104 	addi	sp,sp,4
    2bcc:	f800283a 	ret

00002bd0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    2bd0:	defffd04 	addi	sp,sp,-12
    2bd4:	dfc00215 	stw	ra,8(sp)
    2bd8:	df000115 	stw	fp,4(sp)
    2bdc:	df000104 	addi	fp,sp,4
    2be0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    2be4:	e13fff17 	ldw	r4,-4(fp)
    2be8:	0002b900 	call	2b90 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    2bec:	003fff06 	br	2bec <_exit+0x1c>
    2bf0:	000029d0 	cmplti	zero,zero,167
